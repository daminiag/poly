

class Demo
{ 
 static int INF = 10000; 

 static class Point  
    { 
        int x; 
        int y; 
  
        public Point(int x, int y) 
        { 
            this.x = x; 
            this.y = y; 
        } 
    }; 

    static boolean isInside(Point polygon[], int n, Point p) 
    { 
        if (n < 3)  
        { 
            return false; 
        } 
  
        // Create a point for line segment from p to infinite 
        Point extreme = new Point(INF, p.y); 
  
        
        int count = 0, i = 0; 
        do 
        { 
            int next = (i + 1) % n; 
  
            if (doIntersect(polygon[i], polygon[next], p, extreme))  
            { 
                
                if (orientation(polygon[i], p, polygon[next]) == 0) 
                { 
                    return onSegment(polygon[i], p, 
                                     polygon[next]); 
                } 
  
                count++; 
            } 
        i = next; 
        } while (i != 0); 
  
        return (count % 2 == 1); // Same as (count%2 == 1) 
    } 
  
    
    public static void main(String[] args)  
    { 
        Point polygon1[] = {new Point(1, 0), 
                            new Point(8, 3),  
                            new Point(8, 8),  
                            new Point(1, 5)}; 
        int n = polygon1.length; 
        Point p = new Point(3, 5); 
        if (isInside(polygon1, n, p)) 
        { 
            System.out.println("True"); 
        }  
        else 
        { 
            System.out.println("False"); 
        } 
       
        Point polygon2[] = {new Point(-3, 2),  
            new Point(-2, -0.8), new Point(0, 1.2),new Point(2.2,0),new Point(2,4.5)}; 
        p = new Point(0,0); 
        n = polygon2.length; 
        if (isInside(polygon2, n, p))  
        { 
            System.out.println("True"); 
        }  
        else 
        { 
            System.out.println("False"); 
        } 
    } 
}
